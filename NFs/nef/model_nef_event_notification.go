/*
Nnef_EventExposure

NEF Event Exposure Service.   Â© 2022 , 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NefEventNotification Represents information related to an event to be reported.
type NefEventNotification struct {
	Event NefEvent `json:"event"`
	TimeStamp Object `json:"timeStamp"`
	SvcExprcInfos *[]ServiceExperienceInfo `json:"svcExprcInfos,omitempty"`
	UeMobilityInfos *[]UeMobilityInfo `json:"ueMobilityInfos,omitempty"`
	UeCommInfos *[]UeCommunicationInfo `json:"ueCommInfos,omitempty"`
	ExcepInfos *[]Object `json:"excepInfos,omitempty"`
	CongestionInfos *[]Object `json:"congestionInfos,omitempty"`
	PerfDataInfos *[]PerformanceDataInfo `json:"perfDataInfos,omitempty"`
	DispersionInfos *[]Object `json:"dispersionInfos,omitempty"`
	CollBhvrInfs *[]Object `json:"collBhvrInfs,omitempty"`
	QoeMetrInfos *[]Object `json:"qoeMetrInfos,omitempty"`
	ConsumpInfos *[]Object `json:"consumpInfos,omitempty"`
	NetAssInvInfos *[]Object `json:"netAssInvInfos,omitempty"`
	ChgPlyInvInfos *[]Object `json:"chgPlyInvInfos,omitempty"`
	MsAccActInfos *[]Object `json:"msAccActInfos,omitempty"`
}

// NewNefEventNotification instantiates a new NefEventNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNefEventNotification(event NefEvent, timeStamp Object) *NefEventNotification {
	this := NefEventNotification{}
	this.Event = event
	this.TimeStamp = timeStamp
	return &this
}

// NewNefEventNotificationWithDefaults instantiates a new NefEventNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNefEventNotificationWithDefaults() *NefEventNotification {
	this := NefEventNotification{}
	return &this
}

// GetEvent returns the Event field value
func (o *NefEventNotification) GetEvent() NefEvent {
	if o == nil {
		var ret NefEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetEventOk() (*NefEvent, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *NefEventNotification) SetEvent(v NefEvent) {
	o.Event = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *NefEventNotification) GetTimeStamp() Object {
	if o == nil {
		var ret Object
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetTimeStampOk() (*Object, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *NefEventNotification) SetTimeStamp(v Object) {
	o.TimeStamp = v
}

// GetSvcExprcInfos returns the SvcExprcInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetSvcExprcInfos() []ServiceExperienceInfo {
	if o == nil || o.SvcExprcInfos == nil {
		var ret []ServiceExperienceInfo
		return ret
	}
	return *o.SvcExprcInfos
}

// GetSvcExprcInfosOk returns a tuple with the SvcExprcInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetSvcExprcInfosOk() (*[]ServiceExperienceInfo, bool) {
	if o == nil || o.SvcExprcInfos == nil {
		return nil, false
	}
	return o.SvcExprcInfos, true
}

// HasSvcExprcInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasSvcExprcInfos() bool {
	if o != nil && o.SvcExprcInfos != nil {
		return true
	}

	return false
}

// SetSvcExprcInfos gets a reference to the given []ServiceExperienceInfo and assigns it to the SvcExprcInfos field.
func (o *NefEventNotification) SetSvcExprcInfos(v []ServiceExperienceInfo) {
	o.SvcExprcInfos = &v
}

// GetUeMobilityInfos returns the UeMobilityInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetUeMobilityInfos() []UeMobilityInfo {
	if o == nil || o.UeMobilityInfos == nil {
		var ret []UeMobilityInfo
		return ret
	}
	return *o.UeMobilityInfos
}

// GetUeMobilityInfosOk returns a tuple with the UeMobilityInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetUeMobilityInfosOk() (*[]UeMobilityInfo, bool) {
	if o == nil || o.UeMobilityInfos == nil {
		return nil, false
	}
	return o.UeMobilityInfos, true
}

// HasUeMobilityInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasUeMobilityInfos() bool {
	if o != nil && o.UeMobilityInfos != nil {
		return true
	}

	return false
}

// SetUeMobilityInfos gets a reference to the given []UeMobilityInfo and assigns it to the UeMobilityInfos field.
func (o *NefEventNotification) SetUeMobilityInfos(v []UeMobilityInfo) {
	o.UeMobilityInfos = &v
}

// GetUeCommInfos returns the UeCommInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetUeCommInfos() []UeCommunicationInfo {
	if o == nil || o.UeCommInfos == nil {
		var ret []UeCommunicationInfo
		return ret
	}
	return *o.UeCommInfos
}

// GetUeCommInfosOk returns a tuple with the UeCommInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetUeCommInfosOk() (*[]UeCommunicationInfo, bool) {
	if o == nil || o.UeCommInfos == nil {
		return nil, false
	}
	return o.UeCommInfos, true
}

// HasUeCommInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasUeCommInfos() bool {
	if o != nil && o.UeCommInfos != nil {
		return true
	}

	return false
}

// SetUeCommInfos gets a reference to the given []UeCommunicationInfo and assigns it to the UeCommInfos field.
func (o *NefEventNotification) SetUeCommInfos(v []UeCommunicationInfo) {
	o.UeCommInfos = &v
}

// GetExcepInfos returns the ExcepInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetExcepInfos() []Object {
	if o == nil || o.ExcepInfos == nil {
		var ret []Object
		return ret
	}
	return *o.ExcepInfos
}

// GetExcepInfosOk returns a tuple with the ExcepInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetExcepInfosOk() (*[]Object, bool) {
	if o == nil || o.ExcepInfos == nil {
		return nil, false
	}
	return o.ExcepInfos, true
}

// HasExcepInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasExcepInfos() bool {
	if o != nil && o.ExcepInfos != nil {
		return true
	}

	return false
}

// SetExcepInfos gets a reference to the given []Object and assigns it to the ExcepInfos field.
func (o *NefEventNotification) SetExcepInfos(v []Object) {
	o.ExcepInfos = &v
}

// GetCongestionInfos returns the CongestionInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetCongestionInfos() []Object {
	if o == nil || o.CongestionInfos == nil {
		var ret []Object
		return ret
	}
	return *o.CongestionInfos
}

// GetCongestionInfosOk returns a tuple with the CongestionInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetCongestionInfosOk() (*[]Object, bool) {
	if o == nil || o.CongestionInfos == nil {
		return nil, false
	}
	return o.CongestionInfos, true
}

// HasCongestionInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasCongestionInfos() bool {
	if o != nil && o.CongestionInfos != nil {
		return true
	}

	return false
}

// SetCongestionInfos gets a reference to the given []Object and assigns it to the CongestionInfos field.
func (o *NefEventNotification) SetCongestionInfos(v []Object) {
	o.CongestionInfos = &v
}

// GetPerfDataInfos returns the PerfDataInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetPerfDataInfos() []PerformanceDataInfo {
	if o == nil || o.PerfDataInfos == nil {
		var ret []PerformanceDataInfo
		return ret
	}
	return *o.PerfDataInfos
}

// GetPerfDataInfosOk returns a tuple with the PerfDataInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetPerfDataInfosOk() (*[]PerformanceDataInfo, bool) {
	if o == nil || o.PerfDataInfos == nil {
		return nil, false
	}
	return o.PerfDataInfos, true
}

// HasPerfDataInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasPerfDataInfos() bool {
	if o != nil && o.PerfDataInfos != nil {
		return true
	}

	return false
}

// SetPerfDataInfos gets a reference to the given []PerformanceDataInfo and assigns it to the PerfDataInfos field.
func (o *NefEventNotification) SetPerfDataInfos(v []PerformanceDataInfo) {
	o.PerfDataInfos = &v
}

// GetDispersionInfos returns the DispersionInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetDispersionInfos() []Object {
	if o == nil || o.DispersionInfos == nil {
		var ret []Object
		return ret
	}
	return *o.DispersionInfos
}

// GetDispersionInfosOk returns a tuple with the DispersionInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetDispersionInfosOk() (*[]Object, bool) {
	if o == nil || o.DispersionInfos == nil {
		return nil, false
	}
	return o.DispersionInfos, true
}

// HasDispersionInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasDispersionInfos() bool {
	if o != nil && o.DispersionInfos != nil {
		return true
	}

	return false
}

// SetDispersionInfos gets a reference to the given []Object and assigns it to the DispersionInfos field.
func (o *NefEventNotification) SetDispersionInfos(v []Object) {
	o.DispersionInfos = &v
}

// GetCollBhvrInfs returns the CollBhvrInfs field value if set, zero value otherwise.
func (o *NefEventNotification) GetCollBhvrInfs() []Object {
	if o == nil || o.CollBhvrInfs == nil {
		var ret []Object
		return ret
	}
	return *o.CollBhvrInfs
}

// GetCollBhvrInfsOk returns a tuple with the CollBhvrInfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetCollBhvrInfsOk() (*[]Object, bool) {
	if o == nil || o.CollBhvrInfs == nil {
		return nil, false
	}
	return o.CollBhvrInfs, true
}

// HasCollBhvrInfs returns a boolean if a field has been set.
func (o *NefEventNotification) HasCollBhvrInfs() bool {
	if o != nil && o.CollBhvrInfs != nil {
		return true
	}

	return false
}

// SetCollBhvrInfs gets a reference to the given []Object and assigns it to the CollBhvrInfs field.
func (o *NefEventNotification) SetCollBhvrInfs(v []Object) {
	o.CollBhvrInfs = &v
}

// GetQoeMetrInfos returns the QoeMetrInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetQoeMetrInfos() []Object {
	if o == nil || o.QoeMetrInfos == nil {
		var ret []Object
		return ret
	}
	return *o.QoeMetrInfos
}

// GetQoeMetrInfosOk returns a tuple with the QoeMetrInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetQoeMetrInfosOk() (*[]Object, bool) {
	if o == nil || o.QoeMetrInfos == nil {
		return nil, false
	}
	return o.QoeMetrInfos, true
}

// HasQoeMetrInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasQoeMetrInfos() bool {
	if o != nil && o.QoeMetrInfos != nil {
		return true
	}

	return false
}

// SetQoeMetrInfos gets a reference to the given []Object and assigns it to the QoeMetrInfos field.
func (o *NefEventNotification) SetQoeMetrInfos(v []Object) {
	o.QoeMetrInfos = &v
}

// GetConsumpInfos returns the ConsumpInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetConsumpInfos() []Object {
	if o == nil || o.ConsumpInfos == nil {
		var ret []Object
		return ret
	}
	return *o.ConsumpInfos
}

// GetConsumpInfosOk returns a tuple with the ConsumpInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetConsumpInfosOk() (*[]Object, bool) {
	if o == nil || o.ConsumpInfos == nil {
		return nil, false
	}
	return o.ConsumpInfos, true
}

// HasConsumpInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasConsumpInfos() bool {
	if o != nil && o.ConsumpInfos != nil {
		return true
	}

	return false
}

// SetConsumpInfos gets a reference to the given []Object and assigns it to the ConsumpInfos field.
func (o *NefEventNotification) SetConsumpInfos(v []Object) {
	o.ConsumpInfos = &v
}

// GetNetAssInvInfos returns the NetAssInvInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetNetAssInvInfos() []Object {
	if o == nil || o.NetAssInvInfos == nil {
		var ret []Object
		return ret
	}
	return *o.NetAssInvInfos
}

// GetNetAssInvInfosOk returns a tuple with the NetAssInvInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetNetAssInvInfosOk() (*[]Object, bool) {
	if o == nil || o.NetAssInvInfos == nil {
		return nil, false
	}
	return o.NetAssInvInfos, true
}

// HasNetAssInvInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasNetAssInvInfos() bool {
	if o != nil && o.NetAssInvInfos != nil {
		return true
	}

	return false
}

// SetNetAssInvInfos gets a reference to the given []Object and assigns it to the NetAssInvInfos field.
func (o *NefEventNotification) SetNetAssInvInfos(v []Object) {
	o.NetAssInvInfos = &v
}

// GetChgPlyInvInfos returns the ChgPlyInvInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetChgPlyInvInfos() []Object {
	if o == nil || o.ChgPlyInvInfos == nil {
		var ret []Object
		return ret
	}
	return *o.ChgPlyInvInfos
}

// GetChgPlyInvInfosOk returns a tuple with the ChgPlyInvInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetChgPlyInvInfosOk() (*[]Object, bool) {
	if o == nil || o.ChgPlyInvInfos == nil {
		return nil, false
	}
	return o.ChgPlyInvInfos, true
}

// HasChgPlyInvInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasChgPlyInvInfos() bool {
	if o != nil && o.ChgPlyInvInfos != nil {
		return true
	}

	return false
}

// SetChgPlyInvInfos gets a reference to the given []Object and assigns it to the ChgPlyInvInfos field.
func (o *NefEventNotification) SetChgPlyInvInfos(v []Object) {
	o.ChgPlyInvInfos = &v
}

// GetMsAccActInfos returns the MsAccActInfos field value if set, zero value otherwise.
func (o *NefEventNotification) GetMsAccActInfos() []Object {
	if o == nil || o.MsAccActInfos == nil {
		var ret []Object
		return ret
	}
	return *o.MsAccActInfos
}

// GetMsAccActInfosOk returns a tuple with the MsAccActInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventNotification) GetMsAccActInfosOk() (*[]Object, bool) {
	if o == nil || o.MsAccActInfos == nil {
		return nil, false
	}
	return o.MsAccActInfos, true
}

// HasMsAccActInfos returns a boolean if a field has been set.
func (o *NefEventNotification) HasMsAccActInfos() bool {
	if o != nil && o.MsAccActInfos != nil {
		return true
	}

	return false
}

// SetMsAccActInfos gets a reference to the given []Object and assigns it to the MsAccActInfos field.
func (o *NefEventNotification) SetMsAccActInfos(v []Object) {
	o.MsAccActInfos = &v
}

func (o NefEventNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["timeStamp"] = o.TimeStamp
	}
	if o.SvcExprcInfos != nil {
		toSerialize["svcExprcInfos"] = o.SvcExprcInfos
	}
	if o.UeMobilityInfos != nil {
		toSerialize["ueMobilityInfos"] = o.UeMobilityInfos
	}
	if o.UeCommInfos != nil {
		toSerialize["ueCommInfos"] = o.UeCommInfos
	}
	if o.ExcepInfos != nil {
		toSerialize["excepInfos"] = o.ExcepInfos
	}
	if o.CongestionInfos != nil {
		toSerialize["congestionInfos"] = o.CongestionInfos
	}
	if o.PerfDataInfos != nil {
		toSerialize["perfDataInfos"] = o.PerfDataInfos
	}
	if o.DispersionInfos != nil {
		toSerialize["dispersionInfos"] = o.DispersionInfos
	}
	if o.CollBhvrInfs != nil {
		toSerialize["collBhvrInfs"] = o.CollBhvrInfs
	}
	if o.QoeMetrInfos != nil {
		toSerialize["qoeMetrInfos"] = o.QoeMetrInfos
	}
	if o.ConsumpInfos != nil {
		toSerialize["consumpInfos"] = o.ConsumpInfos
	}
	if o.NetAssInvInfos != nil {
		toSerialize["netAssInvInfos"] = o.NetAssInvInfos
	}
	if o.ChgPlyInvInfos != nil {
		toSerialize["chgPlyInvInfos"] = o.ChgPlyInvInfos
	}
	if o.MsAccActInfos != nil {
		toSerialize["msAccActInfos"] = o.MsAccActInfos
	}
	return json.Marshal(toSerialize)
}

type NullableNefEventNotification struct {
	value *NefEventNotification
	isSet bool
}

func (v NullableNefEventNotification) Get() *NefEventNotification {
	return v.value
}

func (v *NullableNefEventNotification) Set(val *NefEventNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableNefEventNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableNefEventNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNefEventNotification(val *NefEventNotification) *NullableNefEventNotification {
	return &NullableNefEventNotification{value: val, isSet: true}
}

func (v NullableNefEventNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNefEventNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



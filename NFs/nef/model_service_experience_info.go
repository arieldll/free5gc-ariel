/*
Nnef_EventExposure

NEF Event Exposure Service.   Â© 2022 , 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServiceExperienceInfo Contains service experience information associated with an application.
type ServiceExperienceInfo struct {
	AppId *Object `json:"appId,omitempty"`
	Supis *[]Object `json:"supis,omitempty"`
	SvcExpPerFlows []Object `json:"svcExpPerFlows"`
}

// NewServiceExperienceInfo instantiates a new ServiceExperienceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceExperienceInfo(svcExpPerFlows []Object) *ServiceExperienceInfo {
	this := ServiceExperienceInfo{}
	this.SvcExpPerFlows = svcExpPerFlows
	return &this
}

// NewServiceExperienceInfoWithDefaults instantiates a new ServiceExperienceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceExperienceInfoWithDefaults() *ServiceExperienceInfo {
	this := ServiceExperienceInfo{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetAppId() Object {
	if o == nil || o.AppId == nil {
		var ret Object
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetAppIdOk() (*Object, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given Object and assigns it to the AppId field.
func (o *ServiceExperienceInfo) SetAppId(v Object) {
	o.AppId = &v
}

// GetSupis returns the Supis field value if set, zero value otherwise.
func (o *ServiceExperienceInfo) GetSupis() []Object {
	if o == nil || o.Supis == nil {
		var ret []Object
		return ret
	}
	return *o.Supis
}

// GetSupisOk returns a tuple with the Supis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetSupisOk() (*[]Object, bool) {
	if o == nil || o.Supis == nil {
		return nil, false
	}
	return o.Supis, true
}

// HasSupis returns a boolean if a field has been set.
func (o *ServiceExperienceInfo) HasSupis() bool {
	if o != nil && o.Supis != nil {
		return true
	}

	return false
}

// SetSupis gets a reference to the given []Object and assigns it to the Supis field.
func (o *ServiceExperienceInfo) SetSupis(v []Object) {
	o.Supis = &v
}

// GetSvcExpPerFlows returns the SvcExpPerFlows field value
func (o *ServiceExperienceInfo) GetSvcExpPerFlows() []Object {
	if o == nil {
		var ret []Object
		return ret
	}

	return o.SvcExpPerFlows
}

// GetSvcExpPerFlowsOk returns a tuple with the SvcExpPerFlows field value
// and a boolean to check if the value has been set.
func (o *ServiceExperienceInfo) GetSvcExpPerFlowsOk() (*[]Object, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SvcExpPerFlows, true
}

// SetSvcExpPerFlows sets field value
func (o *ServiceExperienceInfo) SetSvcExpPerFlows(v []Object) {
	o.SvcExpPerFlows = v
}

func (o ServiceExperienceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if o.Supis != nil {
		toSerialize["supis"] = o.Supis
	}
	if true {
		toSerialize["svcExpPerFlows"] = o.SvcExpPerFlows
	}
	return json.Marshal(toSerialize)
}

type NullableServiceExperienceInfo struct {
	value *ServiceExperienceInfo
	isSet bool
}

func (v NullableServiceExperienceInfo) Get() *ServiceExperienceInfo {
	return v.value
}

func (v *NullableServiceExperienceInfo) Set(val *ServiceExperienceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceExperienceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceExperienceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceExperienceInfo(val *ServiceExperienceInfo) *NullableServiceExperienceInfo {
	return &NullableServiceExperienceInfo{value: val, isSet: true}
}

func (v NullableServiceExperienceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceExperienceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



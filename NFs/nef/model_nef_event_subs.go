/*
Nnef_EventExposure

NEF Event Exposure Service.   Â© 2022 , 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NefEventSubs Represents an event to be subscribed and the related event filter information.
type NefEventSubs struct {
	Event NefEvent `json:"event"`
	EventFilter *NefEventFilter `json:"eventFilter,omitempty"`
}

// NewNefEventSubs instantiates a new NefEventSubs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNefEventSubs(event NefEvent) *NefEventSubs {
	this := NefEventSubs{}
	this.Event = event
	return &this
}

// NewNefEventSubsWithDefaults instantiates a new NefEventSubs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNefEventSubsWithDefaults() *NefEventSubs {
	this := NefEventSubs{}
	return &this
}

// GetEvent returns the Event field value
func (o *NefEventSubs) GetEvent() NefEvent {
	if o == nil {
		var ret NefEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *NefEventSubs) GetEventOk() (*NefEvent, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *NefEventSubs) SetEvent(v NefEvent) {
	o.Event = v
}

// GetEventFilter returns the EventFilter field value if set, zero value otherwise.
func (o *NefEventSubs) GetEventFilter() NefEventFilter {
	if o == nil || o.EventFilter == nil {
		var ret NefEventFilter
		return ret
	}
	return *o.EventFilter
}

// GetEventFilterOk returns a tuple with the EventFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventSubs) GetEventFilterOk() (*NefEventFilter, bool) {
	if o == nil || o.EventFilter == nil {
		return nil, false
	}
	return o.EventFilter, true
}

// HasEventFilter returns a boolean if a field has been set.
func (o *NefEventSubs) HasEventFilter() bool {
	if o != nil && o.EventFilter != nil {
		return true
	}

	return false
}

// SetEventFilter gets a reference to the given NefEventFilter and assigns it to the EventFilter field.
func (o *NefEventSubs) SetEventFilter(v NefEventFilter) {
	o.EventFilter = &v
}

func (o NefEventSubs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if o.EventFilter != nil {
		toSerialize["eventFilter"] = o.EventFilter
	}
	return json.Marshal(toSerialize)
}

type NullableNefEventSubs struct {
	value *NefEventSubs
	isSet bool
}

func (v NullableNefEventSubs) Get() *NefEventSubs {
	return v.value
}

func (v *NullableNefEventSubs) Set(val *NefEventSubs) {
	v.value = val
	v.isSet = true
}

func (v NullableNefEventSubs) IsSet() bool {
	return v.isSet
}

func (v *NullableNefEventSubs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNefEventSubs(val *NefEventSubs) *NullableNefEventSubs {
	return &NullableNefEventSubs{value: val, isSet: true}
}

func (v NullableNefEventSubs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNefEventSubs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Nnef_EventExposure

NEF Event Exposure Service.   Â© 2022 , 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NefEventExposureSubsc Represents an Individual Network Exposure Event Subscription resource.
type NefEventExposureSubsc struct {
	EventsSubs []NefEventSubs `json:"eventsSubs"`
	EventsRepInfo *Object `json:"eventsRepInfo,omitempty"`
	NotifUri Object `json:"notifUri"`
	NotifId string `json:"notifId"`
	EventNotifs *[]NefEventNotification `json:"eventNotifs,omitempty"`
	SuppFeat *Object `json:"suppFeat,omitempty"`
}

// NewNefEventExposureSubsc instantiates a new NefEventExposureSubsc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNefEventExposureSubsc(eventsSubs []NefEventSubs, notifUri Object, notifId string) *NefEventExposureSubsc {
	this := NefEventExposureSubsc{}
	this.EventsSubs = eventsSubs
	this.NotifUri = notifUri
	this.NotifId = notifId
	return &this
}

// NewNefEventExposureSubscWithDefaults instantiates a new NefEventExposureSubsc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNefEventExposureSubscWithDefaults() *NefEventExposureSubsc {
	this := NefEventExposureSubsc{}
	return &this
}

// GetEventsSubs returns the EventsSubs field value
func (o *NefEventExposureSubsc) GetEventsSubs() []NefEventSubs {
	if o == nil {
		var ret []NefEventSubs
		return ret
	}

	return o.EventsSubs
}

// GetEventsSubsOk returns a tuple with the EventsSubs field value
// and a boolean to check if the value has been set.
func (o *NefEventExposureSubsc) GetEventsSubsOk() (*[]NefEventSubs, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventsSubs, true
}

// SetEventsSubs sets field value
func (o *NefEventExposureSubsc) SetEventsSubs(v []NefEventSubs) {
	o.EventsSubs = v
}

// GetEventsRepInfo returns the EventsRepInfo field value if set, zero value otherwise.
func (o *NefEventExposureSubsc) GetEventsRepInfo() Object {
	if o == nil || o.EventsRepInfo == nil {
		var ret Object
		return ret
	}
	return *o.EventsRepInfo
}

// GetEventsRepInfoOk returns a tuple with the EventsRepInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventExposureSubsc) GetEventsRepInfoOk() (*Object, bool) {
	if o == nil || o.EventsRepInfo == nil {
		return nil, false
	}
	return o.EventsRepInfo, true
}

// HasEventsRepInfo returns a boolean if a field has been set.
func (o *NefEventExposureSubsc) HasEventsRepInfo() bool {
	if o != nil && o.EventsRepInfo != nil {
		return true
	}

	return false
}

// SetEventsRepInfo gets a reference to the given Object and assigns it to the EventsRepInfo field.
func (o *NefEventExposureSubsc) SetEventsRepInfo(v Object) {
	o.EventsRepInfo = &v
}

// GetNotifUri returns the NotifUri field value
func (o *NefEventExposureSubsc) GetNotifUri() Object {
	if o == nil {
		var ret Object
		return ret
	}

	return o.NotifUri
}

// GetNotifUriOk returns a tuple with the NotifUri field value
// and a boolean to check if the value has been set.
func (o *NefEventExposureSubsc) GetNotifUriOk() (*Object, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotifUri, true
}

// SetNotifUri sets field value
func (o *NefEventExposureSubsc) SetNotifUri(v Object) {
	o.NotifUri = v
}

// GetNotifId returns the NotifId field value
func (o *NefEventExposureSubsc) GetNotifId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotifId
}

// GetNotifIdOk returns a tuple with the NotifId field value
// and a boolean to check if the value has been set.
func (o *NefEventExposureSubsc) GetNotifIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NotifId, true
}

// SetNotifId sets field value
func (o *NefEventExposureSubsc) SetNotifId(v string) {
	o.NotifId = v
}

// GetEventNotifs returns the EventNotifs field value if set, zero value otherwise.
func (o *NefEventExposureSubsc) GetEventNotifs() []NefEventNotification {
	if o == nil || o.EventNotifs == nil {
		var ret []NefEventNotification
		return ret
	}
	return *o.EventNotifs
}

// GetEventNotifsOk returns a tuple with the EventNotifs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventExposureSubsc) GetEventNotifsOk() (*[]NefEventNotification, bool) {
	if o == nil || o.EventNotifs == nil {
		return nil, false
	}
	return o.EventNotifs, true
}

// HasEventNotifs returns a boolean if a field has been set.
func (o *NefEventExposureSubsc) HasEventNotifs() bool {
	if o != nil && o.EventNotifs != nil {
		return true
	}

	return false
}

// SetEventNotifs gets a reference to the given []NefEventNotification and assigns it to the EventNotifs field.
func (o *NefEventExposureSubsc) SetEventNotifs(v []NefEventNotification) {
	o.EventNotifs = &v
}

// GetSuppFeat returns the SuppFeat field value if set, zero value otherwise.
func (o *NefEventExposureSubsc) GetSuppFeat() Object {
	if o == nil || o.SuppFeat == nil {
		var ret Object
		return ret
	}
	return *o.SuppFeat
}

// GetSuppFeatOk returns a tuple with the SuppFeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefEventExposureSubsc) GetSuppFeatOk() (*Object, bool) {
	if o == nil || o.SuppFeat == nil {
		return nil, false
	}
	return o.SuppFeat, true
}

// HasSuppFeat returns a boolean if a field has been set.
func (o *NefEventExposureSubsc) HasSuppFeat() bool {
	if o != nil && o.SuppFeat != nil {
		return true
	}

	return false
}

// SetSuppFeat gets a reference to the given Object and assigns it to the SuppFeat field.
func (o *NefEventExposureSubsc) SetSuppFeat(v Object) {
	o.SuppFeat = &v
}

func (o NefEventExposureSubsc) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventsSubs"] = o.EventsSubs
	}
	if o.EventsRepInfo != nil {
		toSerialize["eventsRepInfo"] = o.EventsRepInfo
	}
	if true {
		toSerialize["notifUri"] = o.NotifUri
	}
	if true {
		toSerialize["notifId"] = o.NotifId
	}
	if o.EventNotifs != nil {
		toSerialize["eventNotifs"] = o.EventNotifs
	}
	if o.SuppFeat != nil {
		toSerialize["suppFeat"] = o.SuppFeat
	}
	return json.Marshal(toSerialize)
}

type NullableNefEventExposureSubsc struct {
	value *NefEventExposureSubsc
	isSet bool
}

func (v NullableNefEventExposureSubsc) Get() *NefEventExposureSubsc {
	return v.value
}

func (v *NullableNefEventExposureSubsc) Set(val *NefEventExposureSubsc) {
	v.value = val
	v.isSet = true
}

func (v NullableNefEventExposureSubsc) IsSet() bool {
	return v.isSet
}

func (v *NullableNefEventExposureSubsc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNefEventExposureSubsc(val *NefEventExposureSubsc) *NullableNefEventExposureSubsc {
	return &NullableNefEventExposureSubsc{value: val, isSet: true}
}

func (v NullableNefEventExposureSubsc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNefEventExposureSubsc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


